{"version":3,"sources":["components/calculator.component.js.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","updateValues","value","setState","currValue","state","updatePrevvalue","prevValue","addToExpression","result","slice","operations","includes","prev","curr","index","length","eval","message","deletebuttons","buttons","console","log","axios","get","then","res","data","SendMessage","catch","error","this","isNaN","obj","id","post","map","key","className","onClick","Read","Write","myresult","readOnly","type","listButtons","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e77302a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nclass Calculator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      prevValue: \"\",\r\n      operations: [\"+\", \"-\", \"*\", \"/\", \".\"],\r\n      currValue: \"\",\r\n      result: \"\",\r\n      message: \"Welcome to my Calculator Application!\",\r\n      deletebuttons: [\"AC\", \"C\"],\r\n      buttons: [\r\n        \"7\",\r\n        \"8\",\r\n        \"9\",\r\n        \"/\",\r\n        \"4\",\r\n        \"5\",\r\n        \"6\",\r\n        \"*\",\r\n        \"1\",\r\n        \"2\",\r\n        \"3\",\r\n        \"-\",\r\n        \".\",\r\n        \"0\",\r\n        \"=\",\r\n        \"+\",\r\n      ],\r\n    };\r\n  }\r\n\r\n  Read() {\r\n    console.log(\"Read the number from the file!\");\r\n    axios\r\n      .get(\"http://localhost:5000/number/mynumber\")\r\n      .then((res) => {\r\n        // console.log(res.data)\r\n        this.setState(\r\n          { result: res.data.value }, this.SendMessage(\"The number value: \" + this.state.result + \"\\n\")\r\n        );\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  SendMessage(message)\r\n  {\r\n    console.log(message);\r\n    this.setState({message: message});\r\n  }\r\n\r\n  Write() {\r\n    if(isNaN(this.state.result)){\r\n      this.setState({message: \"Your expression is not a number, please edit it!\" })\r\n      return;  //check if the result is a number or not\r\n    }\r\n    console.log(\"Write the number to the file!\");\r\n    // console.log('The number value: ' + this.state.result + \"\\n\");\r\n\r\n    const obj = { id: \"mynumber\", value: this.state.result };\r\n    axios\r\n      .post(\"http://localhost:5000/number/update/mynumber\", obj)\r\n      .then((res) => console.log(res.data.value)\r\n      )\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  SendMessageToWrite(data)\r\n  {\r\n    console.log(data);\r\n  }\r\n\r\n  updateValues = (value) => {\r\n    this.setState(\r\n      { currValue: this.state.currValue },\r\n      this.updatePrevvalue(value)\r\n    );\r\n  };\r\n\r\n  updatePrevvalue = (value) => {\r\n    this.setState({ prevValue: value });\r\n  };\r\n\r\n  addToExpression = (value) => {\r\n    if (this.state.result !== \"\") {\r\n      this.updateValues(value);\r\n    }\r\n    if (value === \"AC\") {\r\n      this.setState({ result: \"\" });\r\n    } else if (value === \"C\") {\r\n      if (this.state.prevValue !== \"=\") {\r\n        this.setState({ result: this.state.result.slice(0, -1) });\r\n      } else {\r\n        this.setState({ result: this.state.result });\r\n      }\r\n    } else if (\r\n      value === \"=\" &&\r\n      !this.state.operations.includes(this.state.prevValue)\r\n    ) {\r\n      let prev = \"\";\r\n      let curr = \"\";\r\n\r\n      for (let index = 0; index < this.state.result.length - 1; index++) {\r\n        prev = this.state.result[index];\r\n        curr = this.state.result[index + 1];\r\n        if (\r\n          this.state.operations.includes(prev) &&\r\n          this.state.operations.includes(curr)\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      this.setState({ result: eval(this.state.result) });\r\n    } else {\r\n      this.setState({ result: this.state.result + value });\r\n    }\r\n  };\r\n\r\n  listButtons() {\r\n    let buttons = this.state.buttons;\r\n    let deletebuttons = this.state.deletebuttons;\r\n    return (\r\n      <div>\r\n        {deletebuttons.map((value, index) => {\r\n          return (\r\n            <button\r\n              key={index}\r\n              className=\"responsive long\"\r\n              onClick={() => this.addToExpression(value)}\r\n            >\r\n              {\" \"}\r\n              {value}{\" \"}\r\n            </button>\r\n          );\r\n        })}\r\n        {buttons.map((value, index) => {\r\n          return (\r\n            <button\r\n              className=\"responsive\"\r\n              key={index}\r\n              onClick={() => this.addToExpression(value)}\r\n            >\r\n              {\" \"}\r\n              {value}{\" \"}\r\n            </button>\r\n          );\r\n        })}\r\n        <button className=\"responsive long\" onClick={() => this.Read()}>\r\n          {\" \"}\r\n          READ{\" \"}\r\n        </button>\r\n        <button className=\"responsive long\" onClick={() => this.Write()}>\r\n          {\" \"}\r\n          WRITE{\" \"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let myresult = this.state.result;\r\n    return (\r\n      <div>\r\n        <div className=\"calculator\">\r\n          <h1>CALCULATOR</h1>\r\n          <textarea readOnly value={this.state.message}>\r\n            \r\n          </textarea>\r\n          <div>\r\n            <input\r\n              className=\"result\"\r\n              type=\"text\"\r\n              readOnly\r\n              value={myresult}\r\n            ></input>\r\n          </div>\r\n          {this.listButtons()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/calculator.component.js\"\n\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}